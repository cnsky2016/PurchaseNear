// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `GoodsService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package cn.purchasenear.v1.goods.rpcservice.ice.interf.goods;

public class SearchInfo implements java.lang.Cloneable, java.io.Serializable
{
    public long userId;

    public String token;

    public double longitude;

    public double latitude;

    public double distance;

    public int page;

    public int pageSize;

    public String goodsName;

    public String sellerName;

    public String goodsCategory;

    public String brand;

    public double lowPrice;

    public double highPrice;

    public int hypostatic;

    public int deliver;

    public int secondHand;

    public int barter;

    public boolean price;

    public boolean saled;

    public boolean browsed;

    public boolean sellerCredit;

    public SearchInfo()
    {
    }

    public SearchInfo(long userId, String token, double longitude, double latitude, double distance, int page, int pageSize, String goodsName, String sellerName, String goodsCategory, String brand, double lowPrice, double highPrice, int hypostatic, int deliver, int secondHand, int barter, boolean price, boolean saled, boolean browsed, boolean sellerCredit)
    {
        this.userId = userId;
        this.token = token;
        this.longitude = longitude;
        this.latitude = latitude;
        this.distance = distance;
        this.page = page;
        this.pageSize = pageSize;
        this.goodsName = goodsName;
        this.sellerName = sellerName;
        this.goodsCategory = goodsCategory;
        this.brand = brand;
        this.lowPrice = lowPrice;
        this.highPrice = highPrice;
        this.hypostatic = hypostatic;
        this.deliver = deliver;
        this.secondHand = secondHand;
        this.barter = barter;
        this.price = price;
        this.saled = saled;
        this.browsed = browsed;
        this.sellerCredit = sellerCredit;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SearchInfo _r = null;
        if(rhs instanceof SearchInfo)
        {
            _r = (SearchInfo)rhs;
        }

        if(_r != null)
        {
            if(userId != _r.userId)
            {
                return false;
            }
            if(token != _r.token)
            {
                if(token == null || _r.token == null || !token.equals(_r.token))
                {
                    return false;
                }
            }
            if(longitude != _r.longitude)
            {
                return false;
            }
            if(latitude != _r.latitude)
            {
                return false;
            }
            if(distance != _r.distance)
            {
                return false;
            }
            if(page != _r.page)
            {
                return false;
            }
            if(pageSize != _r.pageSize)
            {
                return false;
            }
            if(goodsName != _r.goodsName)
            {
                if(goodsName == null || _r.goodsName == null || !goodsName.equals(_r.goodsName))
                {
                    return false;
                }
            }
            if(sellerName != _r.sellerName)
            {
                if(sellerName == null || _r.sellerName == null || !sellerName.equals(_r.sellerName))
                {
                    return false;
                }
            }
            if(goodsCategory != _r.goodsCategory)
            {
                if(goodsCategory == null || _r.goodsCategory == null || !goodsCategory.equals(_r.goodsCategory))
                {
                    return false;
                }
            }
            if(brand != _r.brand)
            {
                if(brand == null || _r.brand == null || !brand.equals(_r.brand))
                {
                    return false;
                }
            }
            if(lowPrice != _r.lowPrice)
            {
                return false;
            }
            if(highPrice != _r.highPrice)
            {
                return false;
            }
            if(hypostatic != _r.hypostatic)
            {
                return false;
            }
            if(deliver != _r.deliver)
            {
                return false;
            }
            if(secondHand != _r.secondHand)
            {
                return false;
            }
            if(barter != _r.barter)
            {
                return false;
            }
            if(price != _r.price)
            {
                return false;
            }
            if(saled != _r.saled)
            {
                return false;
            }
            if(browsed != _r.browsed)
            {
                return false;
            }
            if(sellerCredit != _r.sellerCredit)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::goods::SearchInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, userId);
        __h = IceInternal.HashUtil.hashAdd(__h, token);
        __h = IceInternal.HashUtil.hashAdd(__h, longitude);
        __h = IceInternal.HashUtil.hashAdd(__h, latitude);
        __h = IceInternal.HashUtil.hashAdd(__h, distance);
        __h = IceInternal.HashUtil.hashAdd(__h, page);
        __h = IceInternal.HashUtil.hashAdd(__h, pageSize);
        __h = IceInternal.HashUtil.hashAdd(__h, goodsName);
        __h = IceInternal.HashUtil.hashAdd(__h, sellerName);
        __h = IceInternal.HashUtil.hashAdd(__h, goodsCategory);
        __h = IceInternal.HashUtil.hashAdd(__h, brand);
        __h = IceInternal.HashUtil.hashAdd(__h, lowPrice);
        __h = IceInternal.HashUtil.hashAdd(__h, highPrice);
        __h = IceInternal.HashUtil.hashAdd(__h, hypostatic);
        __h = IceInternal.HashUtil.hashAdd(__h, deliver);
        __h = IceInternal.HashUtil.hashAdd(__h, secondHand);
        __h = IceInternal.HashUtil.hashAdd(__h, barter);
        __h = IceInternal.HashUtil.hashAdd(__h, price);
        __h = IceInternal.HashUtil.hashAdd(__h, saled);
        __h = IceInternal.HashUtil.hashAdd(__h, browsed);
        __h = IceInternal.HashUtil.hashAdd(__h, sellerCredit);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(userId);
        __os.writeString(token);
        __os.writeDouble(longitude);
        __os.writeDouble(latitude);
        __os.writeDouble(distance);
        __os.writeInt(page);
        __os.writeInt(pageSize);
        __os.writeString(goodsName);
        __os.writeString(sellerName);
        __os.writeString(goodsCategory);
        __os.writeString(brand);
        __os.writeDouble(lowPrice);
        __os.writeDouble(highPrice);
        __os.writeInt(hypostatic);
        __os.writeInt(deliver);
        __os.writeInt(secondHand);
        __os.writeInt(barter);
        __os.writeBool(price);
        __os.writeBool(saled);
        __os.writeBool(browsed);
        __os.writeBool(sellerCredit);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        userId = __is.readLong();
        token = __is.readString();
        longitude = __is.readDouble();
        latitude = __is.readDouble();
        distance = __is.readDouble();
        page = __is.readInt();
        pageSize = __is.readInt();
        goodsName = __is.readString();
        sellerName = __is.readString();
        goodsCategory = __is.readString();
        brand = __is.readString();
        lowPrice = __is.readDouble();
        highPrice = __is.readDouble();
        hypostatic = __is.readInt();
        deliver = __is.readInt();
        secondHand = __is.readInt();
        barter = __is.readInt();
        price = __is.readBool();
        saled = __is.readBool();
        browsed = __is.readBool();
        sellerCredit = __is.readBool();
    }

    public void
    ice_write(Ice.OutputStream __outS)
    {
        __outS.writeLong(userId);
        __outS.writeString(token);
        __outS.writeDouble(longitude);
        __outS.writeDouble(latitude);
        __outS.writeDouble(distance);
        __outS.writeInt(page);
        __outS.writeInt(pageSize);
        __outS.writeString(goodsName);
        __outS.writeString(sellerName);
        __outS.writeString(goodsCategory);
        __outS.writeString(brand);
        __outS.writeDouble(lowPrice);
        __outS.writeDouble(highPrice);
        __outS.writeInt(hypostatic);
        __outS.writeInt(deliver);
        __outS.writeInt(secondHand);
        __outS.writeInt(barter);
        __outS.writeBool(price);
        __outS.writeBool(saled);
        __outS.writeBool(browsed);
        __outS.writeBool(sellerCredit);
    }

    public void
    ice_read(Ice.InputStream __inS)
    {
        userId = __inS.readLong();
        token = __inS.readString();
        longitude = __inS.readDouble();
        latitude = __inS.readDouble();
        distance = __inS.readDouble();
        page = __inS.readInt();
        pageSize = __inS.readInt();
        goodsName = __inS.readString();
        sellerName = __inS.readString();
        goodsCategory = __inS.readString();
        brand = __inS.readString();
        lowPrice = __inS.readDouble();
        highPrice = __inS.readDouble();
        hypostatic = __inS.readInt();
        deliver = __inS.readInt();
        secondHand = __inS.readInt();
        barter = __inS.readInt();
        price = __inS.readBool();
        saled = __inS.readBool();
        browsed = __inS.readBool();
        sellerCredit = __inS.readBool();
    }

    public static final long serialVersionUID = 1632616232L;
}
